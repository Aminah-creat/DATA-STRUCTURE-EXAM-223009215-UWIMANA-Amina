class TreeNode:
    """A node in the Binary Tree."""
    def __init__(self, key, value):
        self.key = key  # Unique identifier for the property (e.g., order ID)
        self.value = value  # Property details (e.g., address, type, price)
        self.left = None  # Left child
        self.right = None  # Right child


class BinaryTree:
    """Binary Tree for tracking property listings."""
    def __init__(self):
        self.root = None

    def add(self, key, value):
        """Add a new property listing to the binary tree."""
        if self.root is None:
            self.root = TreeNode(key, value)
            print(f"Added root: {key} -> {value}")
        else:
            self._add(self.root, key, value)

    def _add(self, node, key, value):
        if key < node.key:
            if node.left is None:
                node.left = TreeNode(key, value)
                print(f"Added: {key} -> {value} (left of {node.key})")
            else:
                self._add(node.left, key, value)
        elif key > node.key:
            if node.right is None:
                node.right = TreeNode(key, value)
                print(f"Added: {key} -> {value} (right of {node.key})")
            else:
                self._add(node.right, key, value)
        else:
            print(f"Duplicate key {key} ignored.")

    def search(self, key):
        """Search for a property by its key."""
        return self._search(self.root, key)

    def _search(self, node, key):
        if node is None:
            return None
        if key == node.key:
            return node
        elif key < node.key:
            return self._search(node.left, key)
        else:
            return self._search(node.right, key)

    def inorder(self):
        """Inorder traversal to get all properties."""
        result = []
        self._inorder(self.root, result)
        return result

    def _inorder(self, node, result):
        if node:
            self._inorder(node.left, result)
            result.append((node.key, node.value))
            self._inorder(node.right, result)

    def display(self):
        """Display the binary tree properties in sorted order."""
        nodes = self.inorder()
        print("Properties (Inorder Traversal):")
        for key, value in nodes:
            print(f"Key: {key}, Value: {value}")


# Example usage
if __name__ == "__main__":
    tree = BinaryTree()

    # Add property listings
    tree.add(3, "Property 3: Studio Apartment")
    tree.add(1, "Property 1: 3-Bedroom Apartment")
    tree.add(4, "Property 4: 4-Bedroom House")
    tree.add(2, "Property 2: 2-Bedroom Condo")
    tree.add(5, "Property 5: Luxury Villa")
    tree.add(6, "Property 6: comfort house")

    # Display all properties
    tree.display()

    # Search for a specific property
    key_to_search = 2
    result = tree.search(key_to_search)
    if result:
        print(f"Found: Key: {result.key}, Value: {result.value}")
    else:
        print(f"Property with key {key_to_search} not found.")
